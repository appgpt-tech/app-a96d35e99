//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { usersEntity } from './db/users.entity';
import { messagesEntity } from './db/messages.entity';
import { chatsEntity } from './db/chats.entity';
import { contactsEntity } from './db/contacts.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      usersEntity,
      messagesEntity,
      chatsEntity,
      contactsEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      users: [
        {
          username: 'username 1',
          email: 'email 1',
          password: 'password 1',
          profilePictureURL: 'profilePictureURL 1',
          status: 'status 1',
          id: 21,
        },
        {
          username: 'username 2',
          email: 'email 2',
          password: 'password 2',
          profilePictureURL: 'profilePictureURL 2',
          status: 'status 2',
          id: 43,
        },
        {
          username: 'username 3',
          email: 'email 3',
          password: 'password 3',
          profilePictureURL: 'profilePictureURL 3',
          status: 'status 3',
          id: 92,
        },
        {
          username: 'username 4',
          email: 'email 4',
          password: 'password 4',
          profilePictureURL: 'profilePictureURL 4',
          status: 'status 4',
          id: 29,
        },
        {
          username: 'username 5',
          email: 'email 5',
          password: 'password 5',
          profilePictureURL: 'profilePictureURL 5',
          status: 'status 5',
          id: 39,
        },
      ],
      messages: [
        {
          senderID: 1,
          chatID: 1,
          content: 'content 1',
          timestamp: '2023-08-28T12:36:34.941Z',
          id: 79,
        },
        {
          senderID: 2,
          chatID: 2,
          content: 'content 2',
          timestamp: '2024-12-03T09:00:46.349Z',
          id: 76,
        },
        {
          senderID: 3,
          chatID: 3,
          content: 'content 3',
          timestamp: '2024-12-12T16:45:54.378Z',
          id: 49,
        },
        {
          senderID: 4,
          chatID: 4,
          content: 'content 4',
          timestamp: '2023-06-23T02:42:28.720Z',
          id: 45,
        },
        {
          senderID: 5,
          chatID: 5,
          content: 'content 5',
          timestamp: '2025-03-12T19:01:27.557Z',
          id: 95,
        },
      ],
      chats: [
        {
          chatID: 'chatID 1',
          participants: 1,
          chatName: 'chatName 1',
          lastMessage: 1,
          id: 92,
        },
        {
          chatID: 'chatID 2',
          participants: 2,
          chatName: 'chatName 2',
          lastMessage: 2,
          id: 53,
        },
        {
          chatID: 'chatID 3',
          participants: 3,
          chatName: 'chatName 3',
          lastMessage: 3,
          id: 93,
        },
        {
          chatID: 'chatID 4',
          participants: 4,
          chatName: 'chatName 4',
          lastMessage: 4,
          id: 87,
        },
        {
          chatID: 'chatID 5',
          participants: 5,
          chatName: 'chatName 5',
          lastMessage: 5,
          id: 74,
        },
      ],
      contacts: [
        { contactName: 1, profilePictureURL: 1, id: 93 },
        { contactName: 2, profilePictureURL: 2, id: 80 },
        { contactName: 3, profilePictureURL: 3, id: 55 },
        { contactName: 4, profilePictureURL: 4, id: 66 },
        { contactName: 5, profilePictureURL: 5, id: 87 },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('usersEntity', data.users);
      await this.SeedResource('messagesEntity', data.messages);
      await this.SeedResource('chatsEntity', data.chats);
      await this.SeedResource('contactsEntity', data.contacts);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
